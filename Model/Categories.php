<?php
namespace Brituy\SimpleBlog\Model;

use Magento\Framework\Model\Context;
use Magento\Framework\Registry;
use Magento\UrlRewrite\Model\UrlRewrite;
use Magento\UrlRewrite\Service\V1\Data\UrlRewrite as UrlRewriteService;
use Magento\UrlRewrite\Model\UrlFinderInterface;

class Categories extends \Magento\Framework\Model\AbstractModel
{
    /** CMS page cache tag */
    const CACHE_TAG = 'blog_categories';

    /** @var string */
    protected $_cacheTag = 'blog_categories';
    //protected $_urlRewrite;

    public function __construct(Context $context, Registry $registry, UrlRewrite $urlRewrite,
    				 UrlRewriteService $urlRewriteService, UrlFinderInterface $urlFinder)
    {
	$this->urlRewrite = $urlRewrite;
	$this->urlRewriteService = $urlRewriteService;
	$this->urlFinder = $urlFinder;
	parent::__construct($context, $registry);
    }

    protected function _construct()
    {
	    $this->_init('Brituy\SimpleBlog\Model\ResourceModel\Categories');
    }

    public function afterSave()
    {
        $categoryId = $this->getData('category_id');
        $categoryName = $this->getData('category');
        $categoryNameParts = explode(' ', $categoryName);

        $categoryUrl = array_shift($categoryNameParts);
        while (count($categoryNameParts) > 0):
            if (count($categoryNameParts) > 0) { $categoryUrl .= "_"; }
            $categoryUrl .= array_shift($categoryNameParts);
        endwhile;
        $categoryUrl .= ".html";

        $filterData = [UrlRewriteService::METADATA => $categoryId];
        $rwFinderByCatId = $this->urlFinder->findOneByData($filterData);

        if ($rwFinderByCatId)
        {
		//UrlRewrite update
		$this->urlRewrite->load($rwFinderByCatId->getUrlRewriteId())
					->setRequestPath("simpleblog/".$categoryUrl)
					->save();
        } else {
		 //UrlRewrite create
		 $this->urlRewrite->setEntityType('custom')
			->setEntityId(0)
			->setTargetPath("simpleblog/index/index/category_id/".$categoryId)
			->setRequestPath("simpleblog/".$categoryUrl)
			->setRedirectType(0)
			->setStoreId(1)
			->setDescription(null)
			->setIsAutogenerated(0)
			->setMetadata($categoryId)
			->save();
		}

        return parent::afterSave();
    }
    
    public function beforeDelete()
    {
	$categoryId = $this->getData('category_id');
	$filterData = [UrlRewriteService::METADATA => $categoryId];
	$rwFinderByCatId = $this->urlFinder->findOneByData($filterData);
	if ($rwFinderByCatId)
	{
		//UrlRewrite delete
		$this->urlRewrite->load($rwFinderByCatId->getUrlRewriteId())->delete();
        }
        
        return parent::beforeDelete();
    }

    /** Return unique ID(s) for each object in system
     ** @return array */
    public function getIdentities()
    {
        return [self::CACHE_TAG . '_' . $this->getId()];
    }

    public function getCategoryByName($category)
    {
        return $this->getCollection()->addFieldToFilter('category', $category)->getItems();
    }

    public function getCategoryById($categoryid)
    {
        return $this->getCollection()->addFieldToFilter('category_id', $categoryid)->getItems();
    }

    public function getCategories()
    {
        return $this->getCollection();
    }
}
